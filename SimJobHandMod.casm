CoreModule SimpleJobHandMod

/**
*ASSUMPTIONS:
*To create an algorithm that is a module which serves as bedrock for job handling for 
*the reactive auto-scalers. The algorithm is expected to set out the 
* the conditions required for job handling to commence.
*This algorithm must model the transition from the queuing stage of 
*the ASM model to the Job handling stage.
*The algorithm is expected to initially check if the resources required for
 *queuing are available. The requisite functions and system states for 
*job queuing should be available and in an idle state.
*The algorithm must choose vms from the set of VMs and map them to jobs
 *for processing to commence.
*/




use Standard
//use ModularityPlugin
use ConditionalRule
use Time
use Modularity


include "./JobInitReqFunMod.casm"


         rule SimJobQue =
              par
                		if   QueReslist and Simple_universes  = ACTIVE  then
               				if VMCount <= NumMinn then
                ReqResources := false and jobhandler(job(JOB), vm(VM)) = false
                   systemstate(JobState, ProcessState, JobTime) := IDLEE
                    print "SYSTEM STATE is WAITING"             
                endpar
        
        
                
      rule SimSelectVms = {
                
                   if (Existing_Vms and Running_Time ) = true   then   
                     if  installed(job, aresources) = false then 
                     if (ReqResources = false)  then 
                           compatible(job, vm) := true
                           belongsto(Belongsto):= true
                           AddVM(vm, job) := true
                           ReqResources := true
                          print "Vms choosen for processing"
                      
                   
                 }
               
          