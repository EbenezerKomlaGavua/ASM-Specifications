CoreASM VmpoolJobQue

/**
ASSUMPTIONS:
This is algorithm models the Vm Pooling Job Initializing algorithm of the ASM model.
The algorithm utilizes universes,Agents,signatures,functions
 and derived funtions in the modeling process.
The algorithm is expected to utilize generated jobs, existing vms,engaged processes 
and supplied resources for the modeling .
The algorithm must check for essential modelling requirements such as process requests, job requests  and
map jobs to processes.
 The Joblauncher is expected to be mapped to ensure that job processing can be achieved 
 but this is expected to fail  and reminds idle. Since jobs could not be mapped.
Vms too will not be mapped. Average vms will be generated at this point.
 This will cause the modelling to enter into the queuing stage.
*/

use Standard
use Modularity
use Time
use Number


include "./JobInitRequiredFunctions.casm"


init InitRule
	//----Initial rule ---
rule InitRule =
       local installJobs in seq  
          par
               
          print " Required cores are supplied "
          print "Required nodes are supplied"
          print "Execution Trace is supplied"
          print "Scaling algorithm is present"
          print"-------------------------------"
           processState := undef
          jobstate :=started
          installJobs := undef
           terminate(self) := false
            program(self) := @MainProgram   
            endpar 
            
        endseq

rule MainProgram =
      if not terminate(self) then

	  par
	  Mapping_Functions()
	    Request_Functions()
	    VmPool_Duration
       VmPool_JobQue
		  terminate(self) := true
		
	endpar         
    else
     program(self) :=undef	
     
     
         
    //checking to see if the utilisation of the vms in the pool exceeds 1 hour.             
       rule VmPool_Duration =
                    par
                    if vmpool(Vmpool) = Qavg and (|VmUt| < 3600) = true then {
                     DestroyVm := true
                     }
                     print "Vm Utilisation time exceeded one hour "
                   endpar  
                                  
                   

     rule VmPool_JobQue =
              par
                if  JobQReslist_ip  = true  and vmpool = Qavg then
                   systemstate(JobState, ProcessState, JobTime) := active
                    print "VmPool_JobQue is in the Queuing stage"             
                endpar
