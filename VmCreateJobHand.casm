CoreASM VmCreateJobHandling

/**
ASSUMPTIONS:
The algorithm demonstrates job handling of the Vm Creation  auto-scaling mechanism.
 This algorithm calls the JobInitRequiredFunctions module which in turns calls
  the JobQueReqFunctions and the PredictiveJobHandling and JobHandlingVmRequest  modules. 
The algorithm is expected to monitor the presences of the 
Job Handling Resource (Reslist) for Predictive auto-scalers.
The threshold level of Vms must be at the maximum level to keep the processing active.
The Maximum utilisation level of the VMs are periodically checked to see if
there is a need to generate more Vms.
If the average utilisation exceeds the min utilisation, more vms are created and mapped for processing.


*/

use Standard
use Modularity
use Number

include "./JobInitReqFunMod.casm"
use Time

enum CurrentVmPosition ={vmF, VmL}
enum VmUL = {UtVMmin, UtVMavg,UtVMmax}
function currentVmPosition :CurrentVmPosition -> NUMBER
function CurrentTime:-> NUMBER
function  VmTime: -> NUMBER

//set program for the executing agent
init InitRule
	//----Initial rule ---
rule InitRule =
       local installJobs in seq  
          par
        
         
          
           processState(Agents) := undef// new_mode
          jobstate :=started
          installJobs := undef
           terminate(self) := false
            program(self) := @MainProgram   
            endpar 
            
        endseq

 rule MainProgram =
      if not terminate(self) then

	  par
	  		 InitReqFunctions()
	  		Multi_JobHand_Mod()
	  		HandleJob
	  		UtilLevel
	  		
	  	print"-------------------------------"
	  	 print"Output : Dur. of Simulation"
	  	 print"Output : Average Queuing Time"
	  	 print"Output : Avg. Utilization of PMs"
	  		
	  		terminate(self) := true
		 
	endpar         
    else
     program(self) :=undef


rule HandleJob =
               par
               while JobHReslist_P = active and tlevel = Tmax do {
               systemstate:= busy
                
               
               }
                  print "Joblauncher is to working now"
               endpar

 rule UtilLevel =
                par 
                     if (|UtVMmax| > |UtVMmin|) = true then {
                        AddVM := true 
                        mappedvm(job, vm):= true
                        }
                   else     
                     if (|UtVMavg| > |UtVMmin|)= true then {
						AddVM := true
						mappedvm(job, vm):= true 
						}
						 systemstate:= active
			    print "Current Utilisation level is sufficient for processing to continue"
                     endpar