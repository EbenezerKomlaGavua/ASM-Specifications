CoreASM LoadPredJobHand

use Standard
use Modularity
use Number

/**
ASSUMPTIONS:
This algorithm models the jobhandling of the Vm optisation auto-scaler. 
This algorithm calls the JobInitRequiredFunctions module which in turns calls
the JobQueReqFunctions and the PredictiveJobHandling  and the JobHandlingVmRequest modules.
The algorithm is expected to call the JobInitRequiredFunctions module which contains all the important universes, 
functions and derived functions to run this algorithm.
 The algorithm is expected to check for running time, placed timerequests and mapped vms.
This algorithm expects that reusable Vms always above the average quantity.
*/



include "./JobInitReqFunMod.casm"
use Time

function  AR_VR_sd:-> BOOLEAN
function AR_su:-> BOOLEAN

//set program for the executing agent
init InitRule
	//----Initial rule ---
rule InitRule =
       local installJobs in seq  
          par
        
          processState(Agents) := undef// new_mode
          jobstate :=started
          installJobs := undef
           terminate(self) := false
            program(self) := @MainProgram   
            endpar 
            
        endseq

 rule MainProgram =
      if not terminate(self) then

	  par
	 	    HandleJob
	  		
	  	print"-------------------------------"
	  	 print"Output : Dur. of Simulation"
	  	 print"Output : Average Queuing Time"
	  	 print"Output : Avg. Utilization of PMs"
	  		
	  		terminate(self) := true
		
	endpar         
    else
     program(self) :=undef
     
   derived VMs = 1000 // This figure is arbitrary and subject to the quantity of virtual machines generated
   
      rule HandleJob =
               par
                
 // Call the monitor_service requets rule from the Job handle module to supplied all the request
  //service requests, services and functions for jobhandling to commence.
                   MonitorSerReq()
// Call the VmRequest rule to supply the job handling session with virtual machines
                       VmRequest() 
 // Ensure that all the jobhandling resource list is available.
                       while (JobHReslist_P) do
 // The  current Vm Utilisation threshold should be higher than the stated maximum utilisation limit
                  if (|VMUlt| > |VMUTmax|) = true then
                  systemstate(JobState, ProcessState, JobTime):= active
                  print "job resource is checked"
                      print "job handling launched"  
                     forall vms in [0..(VMs-1)] do
                    if (|VMUlt| > |VMUTmax|) = true then 
 //Self healing is executed
            	      selfhealing_su := active
            	    if   (|VMUlt| > |VMUTmax|) = true  then
 //Execute resource-level scaling up
            	         AR_su := active
            	     if (|VMUlt| < |VMUTmax|) = true then 
   //Execute resource-level scaling down
            	         AR_VR_sd := active 
            	      print "Job processing is active"
               endpar
               
                
                 
  
   
   
   
  