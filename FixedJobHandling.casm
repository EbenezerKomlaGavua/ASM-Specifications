CoreASM FixedJobHandling


/**
ASSUMPTIONS:
This algorithm is designed to model the Fixed Job handling processes. The algorithm is designed to utilized 
the FixedJobHandMod module. This modelling is expected to show the various stages of job initialisation, queuing and
jobhandling. The key components of the modellings such as state transitions are expected to be displayed.

*/
//use standard plugins
use Standard
use Modularity

include "./JobInitRequiredFunctions.casm"
use Time

 function started_t:->NUMBER


//set program for the executing agent
init InitRule
	//----Initial rule ---
rule InitRule =
       local installJobs in seq  
          par
     
          print " Required cores are supplied "
          print "Required nodes are supplied"
          print "Execution Trace is supplied"
          print "Scaling algorithm is present"
          print"-------------------------------"
          
           processState(Agents) := undef
          jobstate :=started
          installJobs := undef
           terminate(self) := false
            program(self) := @MainProgram   
            endpar 
            
        endseq

 rule MainProgram =
      if not terminate(self) then

	  par
	  		Request_Functions()
	  		Mapping_Functions()
	  		Job_Queuing()
	  		Select_Vms()
	  		Handle_Job
	  	print"-------------------------------"
	  	 print"Output : Dur. of Simulation"
	  	 print"Output : Average Queuing Time"
	  	 print"Output : Avg. Utilization of PMs"
	  		
	  		terminate(self) := true
		
	endpar         
    else
     program(self) :=undef
 /**   
* A  job handling rule that ensures that sufficient time is allocated, whilst keeping
* the time request mapped but vms mapped to undefine. However, once the job get installed tasks,
* the vms will be mapped, the event will be acknowledged and the job processing begins.    
*/
  
  
     rule Handle_Job =
         par
          while (time = Running_Time) and timeRequest(process, job) = true and mappedvm(job, vm) != undef do {
          InstallJobs()
          
            Event(t)
            JobState := running
            JobTime := processing
            processState(Agents) := running
            }
         
           
           Map_Jobhandler()
           
            print "jobs are currently being processed"
        
          endpar
          
  // defintion of an event rule to monitor when jobs are installed as tasks and  handling commences
  rule Event(t) = started_t:= true
