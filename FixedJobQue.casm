CoreASM FixedJobQue

/**
ASSUMPTIONS:
This is algorithm models the fixed Job Initializing algorithm of the ASM model.
The algorithm utilizes universes,Agents,signatures,functions
 and derived funtions in the modeling process.
The algorithm is expected to utilize generated jobs, existing vms,engaged processes 
and supplied resources for the modeling .
The algorithm must check for essential modelling requirements such as process requests, job requests  and
map jobs to processes.
 The Jobhandler is expected to be mapped to ensure that job processing can be achieved 
 but this is expected to fail  and remind idle, Since jobs will not be mapped.
Vms too will not be mapped. This will cause the modelling to enter into the queuing stage
*/

use Standard
use Time
//set program for the executing agent

use Modularity
include "./JobInitReqFunMod.casm"



init InitRule
	//----Initial rule ---
rule InitRule =
       local installJobs in seq  
          par
       
          print " Required cores are supplied "
          print "Required nodes are supplied"
          print "Execution Trace is supplied"
          print "Scaling algorithm is present"
          print"-----------------------------"
           
           processState := undef
          jobstate :=started
          installJobs := undef
           terminate(self) := false
            program(self) := @MainProgram   
            endpar 
            
        endseq
  
  
rule MainProgram =
      if not terminate(self) then

	  par
		 Check_For_Resources 
		 Job_and_Process_Requesting
		 Map_Vms_and_Jobhandler
		 terminate(self) := true
		
	endpar         
    else
     program(self) :=undef	 
     
     
// rules for checking the availability resources before commencing the refinement process             
 rule Check_For_Resources =
      par
         if (Supplied_Resources and Generated_Jobs and Running_Time and Engaged_Processes and Existing_Vms) then 
         ProcessState(self) := ready_mode
         
         
         endpar 
 /**        
 rule for requesting jobs and processes. The jobs are mapped unto the aresources, 
whilst the processes are also mapped to the aresources.  
*/

rule Job_and_Process_Requesting = 
  par
    if jobRequest(job(JOB), aresources) = true and processRequests(process(PROCESS), aresources) = true and mappedjob(job(JOB), process(PROCESS)) = true  then {
                JobTime := waiting
                  } 
                                        
         endpar
  
     
/**
* Jobhandling begins when there a vms for the generated jobs. 
*The mapped vms and jobs are processed through the activities of the jobhandler. 
  */
  rule Map_Vms_and_Jobhandler =
                  par 
                  
                  if  mapppedvm(job(JOB), vm(VM))  = false and jobhandler(job(JOB), vm(VM)) = false   then { 
                      JobState := waiting 
                    
                      }
                      print "Vms mapping paused"
                      print "jobhandler is idle"
                  endpar        
 
        
   